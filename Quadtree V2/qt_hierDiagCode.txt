//######################################################################
//>>> Quadtree Hierarchy Diagram Viz Code (works, but archived as .txt)
//######################################################################

/*======================================================================
|>>> Class QTDiagramNode
+-----------------------------------------------------------------------
| Description (QAD): Implements simple 'R-Tree style' visualization of
| the Quadtree as a DAG tree of Branching Factor {0,4}. Gets very wide,
| very quickly and I'd like to use "better" algorithm, but will forego
| that battle for now to K.I.S.S. and get the otherwise working demo up.
+-----------------------------------------------------------------------
| Implementation Note: The following is needed to get this working...
|
| var showQTDiag = true;                   // as a global variable
|
| if(showQTDiag){qtUpdateDiag();}          // in setup() after initializing QT
|
| if(showQTDiag){QT.diagNode.render();}    // in draw() after rendering QT
|
| if(showQTDiagram){qtUpdateDiag();}       // after inserting point into QT
|
| this.diagNode = new QTDiagramNode(this); // in QTNode constructor
|
| function qtUpdateDiag(){                 // for use with the aforementioned
|   QT.diagNode.calcBBox();
|   QT.diagNode.calcPos((width/2)-(QT.diagNode.dim/2));  
| }
+=====================================================================*/
class QTDiagramNode{
  static bboxDiam = 8;
  static bboxMarg = 4;
  static yOffset  = 24;

  constructor(node){
    this.node = node;
    this.pos = vec2();
    this.dim = 0;
    this.mid = 0;
  }

  calcBBox(){
    this.dim = 0;

    if(this.node.NW!=null){this.node.NW.diagNode.calcBBox();}
    if(this.node.NE!=null){this.node.NE.diagNode.calcBBox();}
    if(this.node.SW!=null){this.node.SW.diagNode.calcBBox();}
    if(this.node.SE!=null){this.node.SE.diagNode.calcBBox();}

    if(!this.node.isContainer){
      this.dim = QTDiagramNode.bboxDiam;
    }
    else{
      // As wide as the total width of my childrens' bounding boxes
      if (this.node.NW!=null){this.dim += this.node.NW.diagNode.dim;}
      if (this.node.NE!=null){this.dim += this.node.NE.diagNode.dim;}
      if (this.node.SE!=null){this.dim += this.node.SE.diagNode.dim;}
      if (this.node.SW!=null){this.dim += this.node.SW.diagNode.dim;}   
      // Plus the partition space between them
      this.dim += 3*QTDiagramNode.bboxMarg;      
    }
  } // Ends Function calcBBox

  calcPos(posX){
    this.pos.x  = posX;
    this.mid    = this.pos.x + (this.dim/2);
    let curWide = this.pos.x;

    if (this.node.NW!=null){this.node.NW.diagNode.calcPos(curWide); curWide += this.node.NW.diagNode.dim + QTDiagramNode.bboxMarg;}
    if (this.node.NE!=null){this.node.NE.diagNode.calcPos(curWide); curWide += this.node.NE.diagNode.dim + QTDiagramNode.bboxMarg;}
    if (this.node.SE!=null){this.node.SE.diagNode.calcPos(curWide); curWide += this.node.SE.diagNode.dim + QTDiagramNode.bboxMarg;}
    if (this.node.SW!=null){this.node.SW.diagNode.calcPos(curWide); curWide += this.node.SW.diagNode.dim + QTDiagramNode.bboxMarg;}    
  } // Ends Function calcPos

  render(off=QTDiagramNode.yOffset){
    strokeWeight(1); stroke(60);

    if (this.node.NW!=null) {
      line(this.mid, off, this.node.NW.diagNode.mid, off+QTDiagramNode.yOffset);
      this.node.NW.diagNode.render(off+QTDiagramNode.yOffset);
    }
    if (this.node.NE!=null) {
      line(this.mid, off, this.node.NE.diagNode.mid, off+QTDiagramNode.yOffset);
      this.node.NE.diagNode.render(off+QTDiagramNode.yOffset);
    }
    if (this.node.SE!=null) {
      line(this.mid, off, this.node.SE.diagNode.mid, off+QTDiagramNode.yOffset);
      this.node.SE.diagNode.render(off+QTDiagramNode.yOffset);
    }
    if (this.node.SW!=null) {
      line(this.mid, off, this.node.SW.diagNode.mid, off+QTDiagramNode.yOffset);
      this.node.SW.diagNode.render(off+QTDiagramNode.yOffset);
    }
    
    if(this.node.isContainer){fill(0,120,240);}
    else if (this.node.storedPt==null){fill(60);}
    else{fill(0,216,0);}

    ellipse(this.mid,off-QTDiagramNode.bboxMarg+(QTDiagramNode.bboxDiam/2),QTDiagramNode.bboxDiam,QTDiagramNode.bboxDiam);
  } // Ends Function render

} // Ends Class QTDiagramNode