################################################################################
#>>> Description: Raymond Hill's 'Usage' Notes; including larger descriptions of
#                 (Sub)Components, where/as applicable/necessary.
################################################################################

  var sites = [{x:300,y:300}, {x:100,y:100}, {x:200,y:500}, {x:250,y:450}, {x:600,y:150}];
  // xl, xr means x left, x right
  // yt, yb means y top, y bottom
  var bbox = {xl:0, xr:800, yt:0, yb:600};
  var voronoi = new Voronoi();
  // pass an object which exhibits xl, xr, yt, yb properties. The bounding
  // box will be used to connect unbound edges, and to close open cells
  result = voronoi.compute(sites, bbox);
  // render, further analyze, etc.

Return value:
  An object with the following properties:

  result.vertices = an array of unordered, unique Voronoi.Vertex objects making up the Voronoi diagram.
  result.edges = an array of unordered, unique Voronoi.Edge objects making up the Voronoi diagram.
  result.cells = an array of Voronoi.Cell object making up the Voronoi diagram. A Cell object might have an empty array of halfedges, meaning no Voronoi cell could be computed for a particular cell.
  result.execTime = the time it took to compute the Voronoi diagram, in milliseconds.

Voronoi.Vertex object:
  x: The x position of the vertex.
  y: The y position of the vertex.

Voronoi.Edge object:
  lSite: the Voronoi site object at the left of this Voronoi.Edge object.
  rSite: the Voronoi site object at the right of this Voronoi.Edge object (canbe null).
  va: an object with an 'x' and a 'y' property defining the start point (relative to the Voronoi site on the left) of this Voronoi.Edge object.
  vb: an object with an 'x' and a 'y' property defining the end point (relative to Voronoi site on the left) of this Voronoi.Edge object.
  For edges which are used to close open cells (using the supplied bounding box), the rSite property will be null.

Voronoi.Cell object:
  site: the Voronoi site object associated with the Voronoi cell.
  halfedges: an array of Voronoi.Halfedge objects, ordered counterclockwise, defining the polygon for this Voronoi cell.

Voronoi.Halfedge object:
  site: the Voronoi site object owning this Voronoi.Halfedge object.
  edge: a reference to the unique Voronoi.Edge object underlying this Voronoi.Halfedge object.
  getStartpoint(): a method returning an object with an 'x' and a 'y' property for the start point of this halfedge. Keep in mind halfedges are always countercockwise.
  getEndpoint(): a method returning an object with an 'x' and a 'y' property for the end point of this halfedge. Keep in mind halfedges are always countercockwise.



HalfEdge.angle: 
  // 'angle' is a value to be used for properly sorting the
  // halfsegments counterclockwise. By convention, we will
  // use the angle of the line defined by the 'site to the left'
  // to the 'site to the right'.
  // However, border edges have no 'site to the right': thus we
  // use the angle of line perpendicular to the halfsegment (the
  // edge should have both end points defined in such case.)


Voronoi.createEdge:
  // this create and add an edge to internal collection, and also create
  // two halfedges which are added to each site's counterclockwise array
  // of halfedges.




################################################################################
>>> Voronoi.clipEdge
################################################################################

(RHill) Line-clipping code from 'Liang-Barsky function' by Daniel White [LINK];
with a bit modified to minimize code paths. Thanks!"
  LINK: http://www.skytopia.com/project/articles/compsci/clipping.html


################################################################################
>>> Voronoi.compute
################################################################################

(RHill) Top-level Fortune loop. Voronoi sites are kept clientside for now, s.t.
user can freely modify their content. At compute time, *references* to the sites
are copied locally.


################################################################################
>>> Voronoi.quantizeSites
################################################################################

(SEiselen) TL;DR: Nerfs input site pts with coord valRs of massive decimals; see
Hill's docu immediately below for more info. I dont think I need to use this as
long as I'm nerfing my own input; but keeping as a 'JIC' nonetheless.

(RHill) Solves https://github.com/gorhill/Javascript-Voronoi/issues/15. Because
not all users will end up using the kind of coord values which would cause this
issue to arise, I chose to let the user decide whether or not he should sanitize
his coord values through this helper. This way, for those users who uses coord
values which are known to be fine, no overhead is added.
